//! Check if a string is an IP address.

use std::sync::OnceLock;

use regex::Regex;

const MAX_IPV4_LENGTH: usize = 15;
const MAX_IPV6_LENGTH: usize = 45;

const V4: &str =
    r#"(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}"#;

fn v6() -> &'static str {
    static PATTERN: OnceLock<String> = OnceLock::new();
    PATTERN.get_or_init(|| {
        const V6_SEG: &str = r#"[a-fA-F\d]{1,4}"#;
        #[rustfmt::skip]
        let buf = [
            "(?:", 
            "(?:", V6_SEG, ":){7}(?:", V6_SEG, "|:)|",                                            // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
            "(?:", V6_SEG, ":){6}(?:", V4, "|:", V6_SEG, "|:)|",                                  // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
            "(?:", V6_SEG, ":){5}(?::", V4, "|(?::", V6_SEG, "){1,2}|:)|",                        // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
            "(?:", V6_SEG, ":){4}(?:(?::", V6_SEG, "){0,1}:", V4, "|(?::", V6_SEG, "){1,3}|:)|",  // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
            "(?:", V6_SEG, ":){3}(?:(?::", V6_SEG, "){0,2}:", V4, "|(?::", V6_SEG, "){1,4}|:)|",  // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
            "(?:", V6_SEG, ":){2}(?:(?::", V6_SEG, "){0,3}:", V4, "|(?::", V6_SEG, "){1,5}|:)|",  // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
            "(?:", V6_SEG, ":){1}(?:(?::", V6_SEG, "){0,4}:", V4, "|(?::", V6_SEG, "){1,6}|:)|",  // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
            "(?::(?:(?::", V6_SEG, "){0,5}:", V4, "|(?::", V6_SEG, "){1,7}|:))",                  // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
            ")(?:%[0-9a-zA-Z]{1,})?"                                                              // %eth0            %1
        ];
        buf.join("").to_owned()
    })
}

fn ip_regex() -> &'static Regex {
    static REGEX: OnceLock<Regex> = OnceLock::new();
    REGEX.get_or_init(|| Regex::new(format!("(?:^{}$)|(?:^{}$)", V4, v6()).as_str()).unwrap())
}

fn ipv4_regex() -> &'static Regex {
    static REGEX: OnceLock<Regex> = OnceLock::new();
    REGEX.get_or_init(|| Regex::new(format!("^{}$", V4).as_str()).unwrap())
}

fn ipv6_regex() -> &'static Regex {
    static REGEX: OnceLock<Regex> = OnceLock::new();
    REGEX.get_or_init(|| Regex::new(format!("^{}$", v6()).as_str()).unwrap())
}

/// Check if `string` is IPv6 or IPv4.
pub fn is_ip(string: &str) -> bool {
    if string.len() > MAX_IPV6_LENGTH {
        return false;
    }

    ip_regex().is_match(string)
}

/// Check if `string` is IPv4.
pub fn is_ipv4(string: &str) -> bool {
    if string.len() > MAX_IPV4_LENGTH {
        return false;
    }

    ipv4_regex().is_match(string)
}

/// Check if `string` is IPv6.
pub fn is_ipv6(string: &str) -> bool {
    if string.len() > MAX_IPV6_LENGTH {
        return false;
    }

    ipv6_regex().is_match(string)
}

/// Returns `Some(6)` if `string` is IPv6, `Some(4)` if `string` is IPv4,
/// or `None` if `string` is neither.
pub fn ip_version(string: &str) -> Option<u8> {
    if is_ipv6(string) {
        return Some(6);
    }

    if is_ipv4(string) {
        return Some(4);
    }

    None
}

#[cfg(test)]
mod tests {
    use super::*;

    const TEST_V4: [&str; 16] = [
        "0.0.0.0",
        "8.8.8.8",
        "127.0.0.1",
        "100.100.100.100",
        "192.168.0.1",
        "18.101.25.153",
        "123.23.34.2",
        "172.26.168.134",
        "212.58.241.131",
        "128.0.0.0",
        "23.71.254.72",
        "223.255.255.255",
        "192.0.2.235",
        "99.198.122.146",
        "46.51.197.88",
        "173.194.34.134",
    ];

    const TEST_V4NOT: [&str; 10] = [
        ".100.100.100.100",
        "100..100.100.100.",
        "100.100.100.100.",
        "999.999.999.999",
        "256.256.256.256",
        "256.100.100.100.100",
        "123.123.123",
        "http://123.123.123",
        "1000.2.3.4",
        "999.2.3.4",
    ];

    const TEST_V6: [&str; 128] = [
        "::",
        "1::",
        "::1",
        "1::8",
        "1::7:8",
        "1:2:3:4:5:6:7:8",
        "1:2:3:4:5:6::8",
        "1:2:3:4:5:6:7::",
        "1:2:3:4:5::7:8",
        "1:2:3:4:5::8",
        "1:2:3::8",
        "1::4:5:6:7:8",
        "1::6:7:8",
        "1::3:4:5:6:7:8",
        "1:2:3:4::6:7:8",
        "1:2::4:5:6:7:8",
        "::2:3:4:5:6:7:8",
        "1:2::8",
        "2001:0000:1234:0000:0000:C1C0:ABCD:0876",
        "3ffe:0b00:0000:0000:0001:0000:0000:000a",
        "FF02:0000:0000:0000:0000:0000:0000:0001",
        "0000:0000:0000:0000:0000:0000:0000:0001",
        "0000:0000:0000:0000:0000:0000:0000:0000",
        "::ffff:192.168.1.26",
        "2::10",
        "ff02::1",
        "fe80::",
        "2002::",
        "2001:db8::",
        "2001:0db8:1234::",
        "::ffff:0:0",
        "::ffff:192.168.1.1",
        "1:2:3:4::8",
        "1::2:3:4:5:6:7",
        "1::2:3:4:5:6",
        "1::2:3:4:5",
        "1::2:3:4",
        "1::2:3",
        "::2:3:4:5:6:7",
        "::2:3:4:5:6",
        "::2:3:4:5",
        "::2:3:4",
        "::2:3",
        "::8",
        "1:2:3:4:5:6::",
        "1:2:3:4:5::",
        "1:2:3:4::",
        "1:2:3::",
        "1:2::",
        "1:2:3:4::7:8",
        "1:2:3::7:8",
        "1:2::7:8",
        "1:2:3:4:5:6:1.2.3.4",
        "1:2:3:4:5::1.2.3.4",
        "1:2:3:4::1.2.3.4",
        "1:2:3::1.2.3.4",
        "1:2::1.2.3.4",
        "1::1.2.3.4",
        "1:2:3:4::5:1.2.3.4",
        "1:2:3::5:1.2.3.4",
        "1:2::5:1.2.3.4",
        "1::5:1.2.3.4",
        "1::5:11.22.33.44",
        "fe80::217:f2ff:254.7.237.98",
        "fe80::217:f2ff:fe07:ed62",
        "2001:DB8:0:0:8:800:200C:417A",
        "FF01:0:0:0:0:0:0:101",
        "0:0:0:0:0:0:0:1",
        "0:0:0:0:0:0:0:0",
        "2001:DB8::8:800:200C:417A",
        "FF01::101",
        "0:0:0:0:0:0:13.1.68.3",
        "0:0:0:0:0:FFFF:129.144.52.38",
        "::13.1.68.3",
        "::FFFF:129.144.52.38",
        "fe80:0000:0000:0000:0204:61ff:fe9d:f156",
        "fe80:0:0:0:204:61ff:fe9d:f156",
        "fe80::204:61ff:fe9d:f156",
        "fe80:0:0:0:204:61ff:254.157.241.86",
        "fe80::204:61ff:254.157.241.86",
        "fe80::1",
        "2001:0db8:85a3:0000:0000:8a2e:0370:7334",
        "2001:db8:85a3:0:0:8a2e:370:7334",
        "2001:db8:85a3::8a2e:370:7334",
        "2001:0db8:0000:0000:0000:0000:1428:57ab",
        "2001:0db8:0000:0000:0000::1428:57ab",
        "2001:0db8:0:0:0:0:1428:57ab",
        "2001:0db8:0:0::1428:57ab",
        "2001:0db8::1428:57ab",
        "2001:db8::1428:57ab",
        "::ffff:12.34.56.78",
        "::ffff:0c22:384e",
        "2001:0db8:1234:0000:0000:0000:0000:0000",
        "2001:0db8:1234:ffff:ffff:ffff:ffff:ffff",
        "2001:db8:a::123",
        "::ffff:192.0.2.128",
        "::ffff:c000:280",
        "a:b:c:d:e:f:f1:f2",
        "a:b:c::d:e:f:f1",
        "a:b:c::d:e:f",
        "a:b:c::d:e",
        "a:b:c::d",
        "::a",
        "::a:b:c",
        "::a:b:c:d:e:f:f1",
        "a::",
        "a:b:c::",
        "a:b:c:d:e:f:f1::",
        "a:bb:ccc:dddd:000e:00f:0f::",
        "0:a:0:a:0:0:0:a",
        "0:a:0:0:a:0:0:a",
        "2001:db8:1:1:1:1:0:0",
        "2001:db8:1:1:1:0:0:0",
        "2001:db8:1:1:0:0:0:0",
        "2001:db8:1:0:0:0:0:0",
        "2001:db8:0:0:0:0:0:0",
        "2001:0:0:0:0:0:0:0",
        "A:BB:CCC:DDDD:000E:00F:0F::",
        "0:0:0:0:0:0:0:a",
        "0:0:0:0:a:0:0:0",
        "0:0:0:a:0:0:0:0",
        "a:0:0:a:0:0:a:a",
        "a:0:0:a:0:0:0:a",
        "a:0:0:0:a:0:0:a",
        "a:0:0:0:a:0:0:0",
        "a:0:0:0:0:0:0:0",
        "fe80::7:8%eth0",
        "fe80::7:8%1",
    ];

    const TEST_V6NOT: [&str; 96] = [
        "",
        "1:",
        ":1",
        "11:36:12",
        "02001:0000:1234:0000:0000:C1C0:ABCD:0876",
        "2001:0000:1234:0000:00001:C1C0:ABCD:0876",
        "2001:0000:1234: 0000:0000:C1C0:ABCD:0876",
        "2001:1:1:1:1:1:255Z255X255Y255",
        "3ffe:0b00:0000:0001:0000:0000:000a",
        "FF02:0000:0000:0000:0000:0000:0000:0000:0001",
        "3ffe:b00::1::a",
        "::1111:2222:3333:4444:5555:6666::",
        "1:2:3::4:5::7:8",
        "12345::6:7:8",
        "1::5:400.2.3.4",
        "1::5:260.2.3.4",
        "1::5:256.2.3.4",
        "1::5:1.256.3.4",
        "1::5:1.2.256.4",
        "1::5:1.2.3.256",
        "1::5:300.2.3.4",
        "1::5:1.300.3.4",
        "1::5:1.2.300.4",
        "1::5:1.2.3.300",
        "1::5:900.2.3.4",
        "1::5:1.900.3.4",
        "1::5:1.2.900.4",
        "1::5:1.2.3.900",
        "1::5:300.300.300.300",
        "1::5:3000.30.30.30",
        "1::400.2.3.4",
        "1::260.2.3.4",
        "1::256.2.3.4",
        "1::1.256.3.4",
        "1::1.2.256.4",
        "1::1.2.3.256",
        "1::300.2.3.4",
        "1::1.300.3.4",
        "1::1.2.300.4",
        "1::1.2.3.300",
        "1::900.2.3.4",
        "1::1.900.3.4",
        "1::1.2.900.4",
        "1::1.2.3.900",
        "1::300.300.300.300",
        "1::3000.30.30.30",
        "::400.2.3.4",
        "::260.2.3.4",
        "::256.2.3.4",
        "::1.256.3.4",
        "::1.2.256.4",
        "::1.2.3.256",
        "::300.2.3.4",
        "::1.300.3.4",
        "::1.2.300.4",
        "::1.2.3.300",
        "::900.2.3.4",
        "::1.900.3.4",
        "::1.2.900.4",
        "::1.2.3.900",
        "::300.300.300.300",
        "::3000.30.30.30",
        "2001:DB8:0:0:8:800:200C:417A:221",
        "FF01::101::2",
        "1111:2222:3333:4444::5555:",
        "1111:2222:3333::5555:",
        "1111:2222::5555:",
        "1111::5555:",
        "::5555:",
        ":::",
        "1111:",
        ":",
        ":1111:2222:3333:4444::5555",
        ":1111:2222:3333::5555",
        ":1111:2222::5555",
        ":1111::5555",
        ":::5555",
        "1.2.3.4:1111:2222:3333:4444::5555",
        "1.2.3.4:1111:2222:3333::5555",
        "1.2.3.4:1111:2222::5555",
        "1.2.3.4:1111::5555",
        "1.2.3.4::5555",
        "1.2.3.4::",
        "fe80:0000:0000:0000:0204:61ff:254.157.241.086",
        "123",
        "ldkfj",
        "2001::FFD3::57ab",
        "2001:db8:85a3::8a2e:37023:7334",
        "2001:db8:85a3::8a2e:370k:7334",
        "1:2:3:4:5:6:7:8:9",
        "1::2::3",
        "1:::3:4:5",
        "1:2:3::4:5:6:7:8:9",
        "::ffff:2.3.4",
        "::ffff:257.1.2.3",
        "::ffff:12345678901234567890.1.26",
    ];

    #[test]
    fn test_ip_regex() {
        for fixture in TEST_V4 {
            assert!(ip_regex().is_match(fixture));
        }

        for fixture in TEST_V4NOT {
            assert!(!ip_regex().is_match(fixture));
        }

        for fixture in TEST_V6 {
            assert!(ip_regex().is_match(fixture));
        }

        for fixture in TEST_V6NOT {
            assert!(!ip_regex().is_match(fixture));
        }
    }

    #[test]
    fn test_ipv4_regex() {
        for fixture in TEST_V4 {
            assert!(ipv4_regex().is_match(fixture));
        }

        for fixture in TEST_V4NOT {
            assert!(!ipv4_regex().is_match(fixture));
        }
    }

    #[test]
    fn test_ipv6_regex() {
        for fixture in TEST_V6 {
            assert!(ipv6_regex().is_match(fixture));
        }

        for fixture in TEST_V6NOT {
            assert!(!ipv6_regex().is_match(fixture));
        }
    }

    #[test]
    fn test_ip() {
        assert!(is_ip("192.168.0.1"));
        assert!(is_ip("1:2:3:4:5:6:7:8"));
        assert!(is_ip("::1"));
        assert!(is_ip("2001:0dc5:72a3:0000:0000:802e:3370:73E4"));
    }

    #[test]
    fn test_ipv4() {
        assert!(is_ipv4("192.168.0.1"));
        assert!(!is_ipv4("123.123.123.1234"));
        assert!(!is_ipv4("123.123.123.12345"));
    }

    #[test]
    fn test_ipv6() {
        assert!(is_ipv6("1:2:3:4:5:6:7:8"));
        assert!(is_ipv6("::1"));
        assert!(is_ipv6("0000:0000:0000:0000:0000:0000:0000:0000"));
        assert!(is_ipv6("0000:0000:0000:0000:0000:ffff:192.168.100.228"));
        assert!(is_ipv6("2001:0dc5:72a3:0000:0000:802e:3370:73E4"));
        assert!(!is_ipv6("2001:0dc5:72a3:0000:0000:802e:3370:73E4XXXXXXXX"));
    }

    #[test]
    fn test_ip_version() {
        assert_eq!(ip_version("192.168.0.1"), Some(4));
        assert_eq!(ip_version("1:2:3:4:5:6:7:8"), Some(6));
        assert_eq!(ip_version("abc"), None);
        assert_eq!(ip_version("123.123.123.12345"), None);
    }
}
